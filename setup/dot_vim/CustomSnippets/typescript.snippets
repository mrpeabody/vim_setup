priority 1000

snippet /// "import reference" b
/// <reference ${2:path}='${1: file}' />
$0
endsnippet

snippet "ct(or)?" "constructor" br
constructor(${0}) {
	${1:// ...}
}
endsnippet

snippet t "this." b
this${VISUAL}$0
endsnippet

snippet "cls|cla(s)?(s)?" "class .." br
class ${1:ClassName}${2: extends ${3:ParentClass}} {
	${4: constructor(${5}) {
    ${6:// ...}
  }}
}
endsnippet

snippet itf "interface .." b
interface ${1:InterfaceName}${2: extends ${3:Parent}} {
	${4:// ...}
}
endsnippet

snippet imm "imports a module" b
import $1 = require('$2');$0
endsnippet

snippet ima "imports * as `from`" b
import * as $2 from '$1';$0
endsnippet

snippet imp "imports a module using `from` syntax" b
import { $2 } from '$1';$0
endsnippet

snippet for "for (...) {...} (counting up)" b
for (let ${1:i} = 0; $1 < ${2:${3:things}.length}; ++$1) {
	${VISUAL}$0
}
endsnippet

snippet forr "for (...) {...} (reversed)" b
for (let ${1:i} = ${2:${3:things}.length - 1}; $1 >= 0; --$1) {
	${VISUAL}$0
}
endsnippet

snippet fori "for (... in ...) {...} For each Key / List Index" b
for (let ${1:key} in ${2:someObjectOrList}) {
   ${VISUAL}$0
}
endsnippet

snippet foro "for (... of ...) {...} - For each list item" b
for (let ${1:value} of ${2:values}) {
   ${VISUAL}$0
}
endsnippet

snippet "c(a)?f" "const arrow function literal (cf)" br
const ${1:functionName} = (${2}): ${3:void} => {
	${VISUAL}$0
};
endsnippet

snippet "=>|af" "arrow function (af)" r
(${1}) => {
	${VISUAL}$0
}
endsnippet

snippet "s(=)?>|s(a)?f" "arrow function with single expression (x => y)" r
${1:(${2})} => ${VISUAL}$0
endsnippet

snippet me "class/object method" b
${2:methodName}(${3}): ${4:void} {
	${0:// ...}
}
endsnippet

snippet "pm(e)?" "private instance method" br
private ${2:methodName} = (${3}): ${4:void} => {
	${0:// ...}
}
endsnippet

snippet dclm "declare module" b
declare module ${1:name} {
	${VISUAL}$0
}
endsnippet
