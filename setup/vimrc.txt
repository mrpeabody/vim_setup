
" Make Vim more useful
set nocompatible

filetype off                  " required
filetype plugin indent on    " required
set completeopt-=preview

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'marijnh/tern_for_vim'
Plugin 'hynek/vim-python-pep8-indent'
Plugin 'tell-k/vim-autopep8'
Plugin 'auto-pairs-gentle'
Plugin 'sheerun/vim-polyglot'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'othree/jsdoc-syntax.vim'
Plugin 'othree/jspc.vim'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'alvan/vim-closetag'
Plugin 'Valloric/MatchTagAlways'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'lepture/vim-jinja'
" Track the engine.
Plugin 'SirVer/ultisnips'
"
" " Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'
Plugin 'airblade/vim-gitgutter'
" Plugin 'severin-lemaignan/vim-minimap'
Plugin 'mhartington/oceanic-next'

" make YCM compatible with UltiSnips
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'

let g:autopep8_max_line_length=120
let g:autopep8_disable_show_diff=1
let g:polyglot_disabled = ['markdown']
let g:vim_json_syntax_conceal = 0
let g:javascript_plugin_flow = 1

" All of your Plugins must be added before the following line
call vundle#end()            " required

let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_confirm_extra_conf=0
let g:airline_powerline_fonts = 1
let g:used_javascript_libs = 'jquery,react'
let g:AutoPairsUseInsertedCount = 1
au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm set ft=jinja

" JsBeautify bindings
autocmd FileType javascript noremap <buffer>  <F9> :call JsBeautify()<cr>
autocmd FileType json noremap <buffer> <F9> :call JsonBeautify()<cr>
autocmd FileType jsx noremap <buffer> <F9> :call JsxBeautify()<cr>
autocmd FileType html noremap <buffer> <F9> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <F9> :call CSSBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <c-f> :call RangeJsBeautify()<cr>
autocmd FileType json vnoremap <buffer> <c-f> :call RangeJsonBeautify()<cr>
autocmd FileType jsx vnoremap <buffer> <c-f> :call RangeJsxBeautify()<cr>
autocmd FileType html vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Enhance command-line completion
set wildmenu

" Allow cursor keys in insertode
set esckeys

" Allow backspace in insert mode
set backspace=indent,eol,start

" vim indentation settings
set autoindent

" Highlight matching parenthesis/braces by default
set showmatch

" Optimize for fast terminal connections
set ttyfast

" Add the g flag to search/replace by default
set gdefault

" Use UTF-8 without BOM
set encoding=utf-8 nobomb

" Change mapleader
let mapleader=","

" Don’t add empty newlines at the end of files
" set binary
" set noeol

" Splits config
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright

" reduces splits to a single line 
set wmh=0

" resize current buffer by +/- 5 
nnoremap <silent> _ :vertical resize -5<cr>
nnoremap <silent> + :vertical resize +5<cr>
nnoremap <silent> - :resize +5<cr>

" Hit f3 in order to have a 'normal' paste in the insert mode
set pastetoggle=<F3>

" Disable arrow keys in both insert and normal mode
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" Disable mouse scroll
nmap <ScrollWheelUp> <nop>
nmap <S-ScrollWheelUp> <nop>
nmap <C-ScrollWheelUp> <nop>
nmap <ScrollWheelDown> <nop>
nmap <S-ScrollWheelDown> <nop>
nmap <C-ScrollWheelDown> <nop>
nmap <ScrollWheelLeft> <nop>
nmap <S-ScrollWheelLeft> <nop>
nmap <C-ScrollWheelLeft> <nop>
nmap <ScrollWheelRight> <nop>
nmap <S-ScrollWheelRight> <nop>
nmap <C-ScrollWheelRight> <nop>

" Enable per-directory .vimrc files and disable unsafe commands in them
set exrc
set secure

" Enable syntax highlighting
syntax on

" Color scheme
" set background=dark
set t_Co=256
" colorscheme wombat256mod
" colorscheme hybrid
" colorscheme predawn
" colorscheme zenburn
colorscheme happy_hacking
" colorscheme OceanicNext
" colorscheme monokai
set colorcolumn=120
set wrap linebreak nolist

" Showing 120 symbols ruler
highlight ColorColumn ctermbg=236

" Highlight current line
" set cursorline

" Make tabs as wide as four spaces
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set bs=2

" Enable line numbers
set number

" Highlight searches
set hlsearch

" When highlighting search terms, make sure text is contrasting color
highlight Search ctermbg=yellow ctermfg=black

" Do the same for gvim
highlight Search guibg=yellow guifg=black"
nnoremap <CR> :nohlsearch<CR>/<BS>

" Ignore case of searches
set ignorecase

" Highlight dynamically as pattern is typed
set incsearch

" Always show status line
" set laststatus=2

" Respect modeline in files
set modeline
set modelines=4

" Enable mouse in all modes
set mouse=a

" Disable error bells
set noerrorbells

" Don’t reset cursor to start of line when moving around.
set nostartofline

" Show the cursor position
set ruler

" Don’t show the intro message when starting Vim
set shortmess=atI

" Show the current mode
set showmode

" Show the filename in the window titlebar
set title

" Show the (partial) command as it’s being typed
set showcmd

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Save a file as root (,W)
noremap <leader>W :w !sudo tee % > /dev/null<CR>

" Automatic commands
set timeoutlen=1000 ttimeoutlen=0
noremap % v%
nnoremap <silent> <F6> :!clear;python3 %<CR>
nnoremap <silent> <F5> :!clear;python %<CR>
" nnoremap <silent> <F9> :call JsBeautify()<CR>
let g:minimap_highlight='Visual'
" autocmd! VimEnter * Minimap
" map <C-m> :MinimapToggle<CR>

" Filesystem Tree
" autocmd vimenter * NERDTree
" autocmd VimEnter * wincmd p
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
map <C-n> :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \}
let NERDTreeIgnore = ['\.pyc$']

" Disable autocommenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Set up the best markdown flavor as the default one
autocmd BufNewFile,BufFilePre,BufRead *.md set filetype=markdown.pandoc

" fix for very large screens (can't see the cursor)
if has('mouse_sgr')
    set ttymouse=sgr
endif

" Disable Macro recorder
map q <Nop>

" Special filetype settings for JSON
au FileType json setl ts=2 sts=2 et shiftwidth=2
